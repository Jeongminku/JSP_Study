package ch09;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

public class StudentDAO {
	//필드 4개 작성.
	Connection conn = null; //Connection의 역할: DB데이터베이스 와의 연결을 해줍니다. --특정 데이터베이스와의 연결(세션). SQL 문이 실행되고 연결 컨텍스트 내에서 결과가 반환됩니다.
	PreparedStatement pstmt; //PreparedStatement의 역할 : 쿼리문의 실행을 담당합니다. --미리 컴파일된 SQL 문을 나타내는 개체입니다. 	SQL 문은 미리 컴파일되어 PreparedStatement개체에 저장됩니다. 그런 다음 이 개체를 사용하여 이 문을 여러 번 효율적으로 실행할 수 있습니다.

	final String JDBC_DRIVER ="oracle.jdbc.driver.OracleDriver";
	final String JDBC_URL ="jdbc:oracle:thin:@localhost:1521:xe";
	//JDBC: Java와 DataBase를 Connect해주는 api -> 우리는 오라클이랑 연결하기떄문에 ojdbc6.jar를 사용하였습니다.
	//JDBC의 URL이 궁금하면 sql로 켜고 localhost.test에 가서 새 접속을 눌러보면 세부정보에서 호스트이름, 포트, SID 확인이 가능합니다.
	
	//DB연결 메소드
	public void open() {
		try {
			Class.forName(JDBC_DRIVER); //드라이버 로드
			conn = DriverManager.getConnection(JDBC_URL, "test", "test1234");//(JDBC_URL, "계정","계정암호") DB를 연결.
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	//DB닫는 메소드
	public void close() {
		try {//★conn과 pstmt는 리소스(데이터를 읽고 쓰는 객체)이므로  닫아주지않으면 메모리낭비!! 사용했다면 반드시 닫아주자.
			pstmt.close();
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	//앞으로 필요한것 2가지
	//1. 학생 정보를 다 불러온다. select * from student;
	//2. 학생 정보를 입력한다.
	
	//1.학생 정보를 다 불러온다.
	public ArrayList<Student> getAll() {
		open(); //db오픈
		ArrayList<Student> students = new ArrayList<>(); //Student 객체를 담을 리스트를 준비합니다.
		
		
		try {
			pstmt = conn.prepareStatement("select * from student");//쿼리문 실행담당 pstmt :  pstmt = conn.prepareStatement("쿼리문 작성");   쿼리문을 입력하여 준비합니다.   //PreparedStatement매개 변수가 있는 SQL 문을 데이터베이스로 보내기 위한 개체를 만듭니다 .
			ResultSet rs = pstmt.executeQuery();//쿼리문을 실행해줍니다.(select문 사용시에 사용합니다.)
			//ResultSet이라는 클래스에 받을것입니다.
			//ResultSet: A table of data representing a database result set, which is usually generated by executing a statement that queries the database.
			//일반적으로 데이터베이스를 쿼리하는 문을 실행하여 생성되는 데이터베이스 결과 집합을 나타내는 데이터 테이블입니다.
			while(rs.next()) {//한 행씩 값이 있는지 없는지 판단한다.
				Student s = new Student();
				s.setId(rs.getInt("id")); //ResultSet이 개체의 현재 행에서 지정된 열의 값을 intJava 프로그래밍 언어로 검색합니다.
				s.setUsername(rs.getString("username"));//이름 //ResultSet이 개체의 현재 행에서 지정된 열의 값을 StringJava 프로그래밍 언어로 검색합니다.
				s.setUniv(rs.getString("univ"));
				s.setBirth(rs.getDate("birth"));
				s.setEmail(rs.getString("email"));
				
				students.add(s); //ArrayList인 students에 객체값을 다 넣어줍니다. 다 끝났다면 5명의 데이터가 들어가있습니다.
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			close();
		} 
		
		return students;
		
	}
	
	//2. 학생 정보를 입력한다.
	
	public void insert(Student s) {
		open();
		//물음표?: 어떤 데이터가 들어올지 모르기 때문에 ?로 표시한다.
		String sql = "insert into student values(id_seq.nextval,?,?,?,?)";
		
		try {
			pstmt = conn.prepareStatement(sql);
			//pstmt.setString(값을 넣어줄 인덱스번호(위치), 넣어줄 데이터);
			//오라클의 데이터 타입으로 변환을 해준다.
			pstmt.setString(1, s.getUsername()); //Sets the designated parameter to the given Java String value 지정된 매개변수를 주어진 Java String값으로 설정합니다.
			pstmt.setString(2, s.getUniv());
			pstmt.setDate(3, s.getBirth());
			pstmt.setString(4, s.getEmail());
			
			pstmt.executeUpdate(); //insert, delete, update를 실행할 때 쓰는 표현 .executeUpdate();
			
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			close();
		}
		
		
	}
	
}
